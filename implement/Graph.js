// 정점과 정점을 연결하는 간선으로 이뤄진 비선형 자료구조 ex) 지하철 노선도

// 정점은 여러 개의 간선을 가질 수 있다.
// 크게 방향 그래프와 무방향 그래프로 나눌 수 있다.
// 간선은 가중치를 가질 수 있다.
// 사이클이 발생할 수 있다.

// 무방향 그래프 : a-b와 b-a는 같은 간선으로 취급된다.

// 연결 그래프 : 어떤 정점에서든 모든 정점과 연결되어있는 그래프
// 비연결 그래프 : 마치 집단이 나눠지듯, 어떻게 해도 서로 연결이 될 수 없는 정점이 존재하는 그래프
// 완전 그래프 : 연결 그래프에서 나아가 모든 정점이 모든 정점과 연결된 그래프

// 사이클 : 정점들 중 서로 순환하는 부분이 생기는 곳
// 이런 사이클을 구현할 때는, 인접행렬/인접리스트의 개념을 사용하면 된다.

// 인접 행렬
const graph = Array.from(Array(5), () => Array(5).fill(false)); // false로 채운 5X5의 행렬이 만들어진다.
graph[0][1] = true;
graph[0][3] = true;
graph[1][2] = true;
graph[2][0] = true;
graph[2][4] = true;
graph[3][2] = true;
graph[4][0] = true;

// 인접 리스트
const graph = Array.from(Array(5), () => []);
graph[0].push(1);
graph[0].push(3);
graph[1].push(2);
graph[2].push(0);
graph[2].push(4);
graph[3].push(2);
graph[4].push(0);
